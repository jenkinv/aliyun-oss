#!/usr/bin/env node
/**
 * Aliyun command prompt
 * @params - cmd
 */

var fs = require('fs'),
    colors = require('colors'),
    datetime = require('datetime');

var ossAPI = require('../client');

var options = {
  accessId: '',
  accessKey: ''
};

var argv = require('optimist')
      .alias('l', 'list')
      .argv;


var currentPath = fs.realpathSync('.');

var KEY_PATH = './options.json';
//load option
try {
  options = JSON.parse(fs.readFileSync(KEY_PATH));
} catch(e){}


var oss = new ossAPI.OssClient(options);

var appLauncher = {
  command: argv._[0] ? argv._[0] : 'help',
  list: argv.list
};

runLauncher(appLauncher);

function runLauncher(appLauncher) {
  if(appLauncher.command != 'login' && (!options || !options.accessId || !options.accessKey)) {
    console.log('please login first!.use [aliyun-oss login accessId accessKey]'.red);
    return;
  }
  //console.log('current path is [' + currentPath + ']');
  switch(appLauncher.command) {
    case 'login':
      doLogin(argv._[1], argv._[2]);
      break;
    case 'ls':
      doListBuckets(appLauncher.list);break;
      break;
    case 'cp':
      doCopy(argv._[1], argv._[2]);
      break;
    case 'help':
    default:
      console.log('output help info.');
  }
}

function doLogin(accessId, accessKey) {
  var options = {accessId: accessId, accessKey: accessKey};
  fs.writeFileSync(KEY_PATH, JSON.stringify(options));
}

function doListBuckets(isList) {
  oss.listBucket(function(err, list) {
    if(err) {
      console.log(err);return;
    }
    var buckets = list['Buckets']['Bucket'];
    buckets.forEach(function(bucket) {
      if(isList) {
        var date = datetime.format(new Date(bucket.CreationDate), '%Y/%m/%d %H:%M:%S');
        console.log(date + '    ' + bucket.Name.blue.bold);
      } else {
        console.log(bucket.Name.blue.bold);
      }
    });
  });
}

/**
 * COPY file between oss and local filesystem.
 *
 * src - local file path [/home/oss/text.txt] or
 *         oss file path [oss:/test/text.txt] 
 * target - just as src
 */
function doCopy(src, target) {
  if(!src || !target) {
    console.log('you should input `cp src target`, oss path start with oss:'.red);
    return;
  }
  var regexp = /^([a-z0-9_\-]{1,16})?:?(.*)$/i;
  var expResult = src.match(regexp);
  var srcBucket = expResult[1],
      srcPath = expResult[2];
      srcFilename = srcPath.split('/').pop();

      expResult = target.match(regexp);
  var targetBucket = expResult[1],
      targetPath = expResult[2],
      targetFilename = targetPath.split('/').pop();
  if(!targetFilename) {
    targetFilename = srcFilename;
    targetPath += targetFilename;
  }
  var isSrcOss = !!srcBucket,
      isTargetOss = !!targetBucket;

  if(!srcPath || !targetPath) {
    console.log('path is not valid'.red);
    return;
  }
  if(!isSrcOss && !isTargetOss) {
    console.log('no oss path found!'.red);
    return;
  }

  if(isSrcOss && isTargetOss) {//copy object innner oss
    return;
  }

  if(isSrcOss && !isTargetOss) {//download file from oss
    oss.getObject(srcBucket, srcPath, targetPath,function(err){
      if(err) {
        console.log(err);
      } else {
        console.log('copy file succ.'.green);
      }
    });
    return;
  }

  if(!isSrcOss && isTargetOss) {//upload file to oss
    
    return;
  }





}
