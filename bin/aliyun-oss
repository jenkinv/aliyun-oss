#!/usr/bin/env node
/**
 * Aliyun command prompt
 * @params - cmd
 */

var fs = require('fs'),
    util = require('util'),
    colors = require('colors'),
    datetime = require('datetime'),
    step = require('step');

var ossAPI = require('../client');

var options = {
  accessId: '',
  accessKey: ''
};

var argv = require('optimist')
      .alias('l', 'list')
      .alias('r', 'recursive')
      .argv;


var currentPath = fs.realpathSync('.');

var KEY_PATH = './options.json';
var ACL_VALUES = ['private', 'public-read', 'public-read-write'];
//load option
try {
  options = JSON.parse(fs.readFileSync(KEY_PATH));
} catch(e){}


var oss = new ossAPI.OssClient(options);

var appLauncher = {
  command: argv._[0] ? argv._[0] : 'help',
  list: argv.list,
  recursive: argv.recursive
};

runLauncher(appLauncher);

function runLauncher(appLauncher) {
  if(appLauncher.command != 'login' && (!options || !options.accessId || !options.accessKey)) {
    console.log('please login first!.use [aliyun-oss login accessId accessKey]'.red);
    return;
  }
  //console.log('current path is [' + currentPath + ']');
  switch(appLauncher.command) {
    case 'login':
      doLogin(argv._[1], argv._[2]);
      break;
    case 'ls':
      doListBuckets(appLauncher.list, argv._[1]);break;
      break;
    case 'cp':
      doCopy(argv._[1], argv._[2]);
      break;
    case 'rm':
      doDelete(argv._[1], appLauncher.recursive);
      break;
    case 'chmod':
      doAclChange(argv._[1], argv._[2]);//bucket, aclValue
      break;
    case 'help':
    default:
      console.log('output help info.');
  }
}

function doLogin(accessId, accessKey) {
  var options = {accessId: accessId, accessKey: accessKey};
  fs.writeFileSync(KEY_PATH, JSON.stringify(options));
}

function formatWithSpaces(string, length) {
  var slength = string.length;
  if(slength < length) {
    var spaceCount = (length - slength);
    while(spaceCount > 0) {
      spaceCount--;
      string += ' ';
    }
  } 
  return string;
}

function doListBuckets(isList, path) {
  if(!path) { //list buckets
    oss.listBucket(function(err, list) {
      if(err) {
        console.log(err);return;
      }
      var buckets = list['Buckets']['Bucket'];
      if(!util.isArray(buckets) && !!buckets) {
        buckets = [buckets];
      } 
      buckets.forEach(function(bucket) {
        if(isList) {
          var date = datetime.format(new Date(bucket.CreationDate), '%Y/%m/%d %H:%M:%S');
          oss.getBucketAcl(bucket.Name, function(err, result) {
            console.log('%s    %s    %s', date, formatWithSpaces(result['AccessControlList']['Grant'], 17), bucket.Name.blue.bold);
          });
        } else {
          console.log(bucket.Name.blue.bold);
        }
      });
    });
  } else {//list files in one bucket
    var path = normalizePath(path);
    if(!path || !path.bucket) {
      console.log('bucket is not set!'.red); return;
    } else {
      oss.listObject(path.bucket, path.path, null, '/', 100, function(err, result) {
        if(err) {
          console.log(err.red); return;
        } else {
          //console.log(result);
          var objects = result['Contents'] || [],
              groups  = result['CommonPrefixes'] || [];
          if(!util.isArray(objects)) {
            objects = [objects];
          }
          if(!util.isArray(groups)) {
            groups = [groups];
          }
          for(var i=0, l=groups.length; i < l; i++) {
            var group = groups[i]['Prefix'];
            console.log(group.substring(path.path.length, group.length - 1).blue.bold);
          }
          for(var i=0, l=objects.length; i < l; i++) {
            var objectKey = objects[i]['Key'];
            var modifyDate = datetime.format(new Date(objects[i]['LastModified']), '%Y/%m/%d %H:%M:%S');
            console.log((isList? modifyDate + '    ' :'') + objectKey.substring(path.path.length));
          }
        }
        
      });
    }
  }
  
}

/**
 * COPY file between oss and local filesystem.
 *
 * src - local file path [/home/oss/text.txt] or
 *         oss file path [oss:test/text.txt] 
 * target - just as src
 */
function doCopy(src, target) {
  src = normalizePath(src);
  target = normalizePath(target);
  if(!src || !target) {
    console.log('you should input `cp src target`, oss path start with bucketname:'.red);
    return;
  }
  if(!target.filename) {//not set target filename, copy from src filename.
    target.filename = src.filename;
    target.path += src.filename;
  }

  var isSrcOss = !!src.bucket,
      isTargetOss = !!target.bucket;


  if(!isSrcOss && !isTargetOss) {
    console.log('no oss path found!'.red);
    return;
  }

  if(isSrcOss && isTargetOss) {//copy object innner oss
    if(!src.bucket || src.bucket != target.bucket) {
      console.log('CANN\'T copy file between different bucket!'.red);return;
    }
    oss.copyObject(src.bucket, target.path, src.path, function(err) {
      if(err) {
        console.log(err);
      } else {
        console.log('copy file succ.'.green);
      }
    });
  }

  if(isSrcOss && !isTargetOss) {//download file from oss
    oss.getObject(src.bucket, src.path, target.path, function(err){
      if(err) {
        console.log(err);
      } else {
        console.log('download file succ.'.green);
      }
    });
    return;
  }

  if(!isSrcOss && isTargetOss) {//upload file to oss
    oss.putObject(target.bucket, target.path, src.path, function(err) {
      if(err) {
        console.log(err);
      } else {
        console.log('upload file succ.'.green);
      }
    });
    return;
  }
}

/**
 * delete bucket or object
 * @param path {String} path 
 * @param resursive {Boolean} whether delete all the objects the bucket contains, otherwise results failure when bucket is not empy.
 */
function doDelete(path, recursive) {
  var path = normalizePath(path);
  if(!path || !path.bucket) {//bucket must exists.
    console.log('param error. bucket must exist. check as `rm bucket:[object]`'.red);
    return;
  }
  if(!path.path) { //delete bucket
    function deleteEmptyBucket(bucket) {
      oss.deleteBucket(bucket, function(err) {
        if(err) {
          console.log(err);
        }
      });
    }
    if(!!recursive) {
      step(
        function getAllObjects() {
          listAllObjects(path.bucket, null, this);
        },
        function deleteAllObjects(err, objects) {
          var that = this;
          if(err) {
            console.log(err.red);
            return;
          }
          objects.forEach(function(object) {
            oss.deleteObject(path.bucket, object['Key'], that.group());
          });
        },
        function deleteBucket(err) {
          if(err) {
            console.log(err.red);
            return;
          } else {
            deleteEmptyBucket(path.bucket);
          }
        }
      );
    } else {
      deleteEmptyBucket(path.bucket);
    }
  } else { //delete object
    oss.deleteObject(path.bucket, path.path, function(err) {
      if(err) {
        console.log(err.red);return;
      }
    });
  }
}

function listAllObjects(bucket, marker, callback) {
  var target = callback;
  if(!target.__list || !marker) target.__list = [];
  oss.listObject(bucket, null, marker, null, 2, function(err, result) {
    if(err) {
      callback(err);
      return;
    }
    var nextMarker = result['NextMarker'];
    var objects = result['Contents'] || [];
    if(util.isArray(objects)) {
      target.__list = target.__list.concat(objects);
    } else {
      target.__list.push(objects);
    }
    if(nextMarker) {
      listAllObjects(bucket, nextMarker, callback);
    } else {
      callback(null, target.__list);
    }
  });
}

/**
 * change bucket acl.
 * acl-value is one of private,public-read,public-read-write
 * also acept 0,1,2 as acl-value's shortcut key
 * @param bucket {String} bucket name
 * @param aclValue {String} private|public-read|public-read-write|0|1|2
 */
function doAclChange(bucket, aclValue) {
  if(!bucket || aclValue === undefined || aclValue === '') {
    console.log('param error. check as `chmod bucket aclValue`'.red);
    return;
  }
  if(ACL_VALUES.indexOf(aclValue) == -1) {
    aclValue = ACL_VALUES[aclValue];
  }
  if(!aclValue) {
    console.log('pls input right aclValue.It\'s private,public-read or public-read-write'.red);
    return;
  }
  oss.setBucketAcl(bucket, aclValue, function(err, result){
    if(err) {
      console.log(err.red);
    } else {
      console.log(result.green);
    }
  });
}

/**
 * normalize the path. 
 * oss path sample is 'buckname:test/hello.txt'
 * local path sample is '/home/jen/world.txt'
 * return {bucket: path: filename: origin}
 */
function normalizePath(filepath) {
  if(!filepath) return null;
  var regexp = /^(?:([a-z0-9_\-]{1,100}):)?(.*)$/i,
      expResult = filepath.match(regexp),
      bucket = expResult[1],
      path = expResult[2]||'',
      filename = path.split('/').pop();
  if(!!bucket) {//change bucketname:/test/hello.txt to bucketname:text/hello.txt
    path = path.replace(/^\/+/, '');
  }
  if(!bucket && !path) {
    console.log((filepath + ' is not valid path.').red);
    return null;
  } else {
    return {bucket: bucket, path: path, filename: filename, origin: filepath};
  }
  
}
